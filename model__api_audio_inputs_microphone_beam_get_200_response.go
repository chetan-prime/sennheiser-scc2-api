/*
TCC M 3rd party API Release

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiAudioInputsMicrophoneBeamGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAudioInputsMicrophoneBeamGet200Response{}

// ApiAudioInputsMicrophoneBeamGet200Response struct for ApiAudioInputsMicrophoneBeamGet200Response
type ApiAudioInputsMicrophoneBeamGet200Response struct {
	// The audio signal will be optimized for the chosen installation type.
	InstallationType *string `json:"installationType,omitempty"`
	// Threshold for detecting the speaker depending on the room noise level.
	SourceDetectionThreshold *string `json:"sourceDetectionThreshold,omitempty"`
	// Offset to the beam's azimuth angle. This will affect the beam metering and zone settings.
	Offset *int32 `json:"offset,omitempty"`
}

// NewApiAudioInputsMicrophoneBeamGet200Response instantiates a new ApiAudioInputsMicrophoneBeamGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAudioInputsMicrophoneBeamGet200Response() *ApiAudioInputsMicrophoneBeamGet200Response {
	this := ApiAudioInputsMicrophoneBeamGet200Response{}
	var installationType string = "FlushMounted"
	this.InstallationType = &installationType
	var sourceDetectionThreshold string = "NormalRoom"
	this.SourceDetectionThreshold = &sourceDetectionThreshold
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// NewApiAudioInputsMicrophoneBeamGet200ResponseWithDefaults instantiates a new ApiAudioInputsMicrophoneBeamGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAudioInputsMicrophoneBeamGet200ResponseWithDefaults() *ApiAudioInputsMicrophoneBeamGet200Response {
	this := ApiAudioInputsMicrophoneBeamGet200Response{}
	var installationType string = "FlushMounted"
	this.InstallationType = &installationType
	var sourceDetectionThreshold string = "NormalRoom"
	this.SourceDetectionThreshold = &sourceDetectionThreshold
	var offset int32 = 0
	this.Offset = &offset
	return &this
}

// GetInstallationType returns the InstallationType field value if set, zero value otherwise.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetInstallationType() string {
	if o == nil || IsNil(o.InstallationType) {
		var ret string
		return ret
	}
	return *o.InstallationType
}

// GetInstallationTypeOk returns a tuple with the InstallationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetInstallationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationType) {
		return nil, false
	}
	return o.InstallationType, true
}

// HasInstallationType returns a boolean if a field has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) HasInstallationType() bool {
	if o != nil && !IsNil(o.InstallationType) {
		return true
	}

	return false
}

// SetInstallationType gets a reference to the given string and assigns it to the InstallationType field.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) SetInstallationType(v string) {
	o.InstallationType = &v
}

// GetSourceDetectionThreshold returns the SourceDetectionThreshold field value if set, zero value otherwise.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetSourceDetectionThreshold() string {
	if o == nil || IsNil(o.SourceDetectionThreshold) {
		var ret string
		return ret
	}
	return *o.SourceDetectionThreshold
}

// GetSourceDetectionThresholdOk returns a tuple with the SourceDetectionThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetSourceDetectionThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDetectionThreshold) {
		return nil, false
	}
	return o.SourceDetectionThreshold, true
}

// HasSourceDetectionThreshold returns a boolean if a field has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) HasSourceDetectionThreshold() bool {
	if o != nil && !IsNil(o.SourceDetectionThreshold) {
		return true
	}

	return false
}

// SetSourceDetectionThreshold gets a reference to the given string and assigns it to the SourceDetectionThreshold field.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) SetSourceDetectionThreshold(v string) {
	o.SourceDetectionThreshold = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ApiAudioInputsMicrophoneBeamGet200Response) SetOffset(v int32) {
	o.Offset = &v
}

func (o ApiAudioInputsMicrophoneBeamGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAudioInputsMicrophoneBeamGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstallationType) {
		toSerialize["installationType"] = o.InstallationType
	}
	if !IsNil(o.SourceDetectionThreshold) {
		toSerialize["sourceDetectionThreshold"] = o.SourceDetectionThreshold
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableApiAudioInputsMicrophoneBeamGet200Response struct {
	value *ApiAudioInputsMicrophoneBeamGet200Response
	isSet bool
}

func (v NullableApiAudioInputsMicrophoneBeamGet200Response) Get() *ApiAudioInputsMicrophoneBeamGet200Response {
	return v.value
}

func (v *NullableApiAudioInputsMicrophoneBeamGet200Response) Set(val *ApiAudioInputsMicrophoneBeamGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAudioInputsMicrophoneBeamGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAudioInputsMicrophoneBeamGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAudioInputsMicrophoneBeamGet200Response(val *ApiAudioInputsMicrophoneBeamGet200Response) *NullableApiAudioInputsMicrophoneBeamGet200Response {
	return &NullableApiAudioInputsMicrophoneBeamGet200Response{value: val, isSet: true}
}

func (v NullableApiAudioInputsMicrophoneBeamGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAudioInputsMicrophoneBeamGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



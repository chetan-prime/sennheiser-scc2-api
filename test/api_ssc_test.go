/*
TCC M 3rd party API Release

Testing SSCAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "//"
)

func Test_openapi_SSCAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SSCAPIService ApiSscSchemaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSCAPI.ApiSscSchemaGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsSessionUUIDAddPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionUUID string

		httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsSessionUUIDAddPut(context.Background(), sessionUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsSessionUUIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionUUID string

		httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsSessionUUIDDelete(context.Background(), sessionUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsSessionUUIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionUUID string

		resp, httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsSessionUUIDGet(context.Background(), sessionUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsSessionUUIDPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionUUID string

		httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsSessionUUIDPut(context.Background(), sessionUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscStateSubscriptionsSessionUUIDRemovePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionUUID string

		httpRes, err := apiClient.SSCAPI.ApiSscStateSubscriptionsSessionUUIDRemovePut(context.Background(), sessionUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSCAPIService ApiSscVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSCAPI.ApiSscVersionGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
TCC M 3rd party API Release

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiDevicePowerPoeDaisychainGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiDevicePowerPoeDaisychainGet200Response{}

// ApiDevicePowerPoeDaisychainGet200Response struct for ApiDevicePowerPoeDaisychainGet200Response
type ApiDevicePowerPoeDaisychainGet200Response struct {
	// Indicates whether there is sufficient power on the PoE input to power a subsequent device on the PoE output.
	SufficientPower *bool `json:"sufficientPower,omitempty"`
	// Indicates whether there is a subsequent device being powered on the PoE output.
	InUse *bool `json:"inUse,omitempty"`
}

// NewApiDevicePowerPoeDaisychainGet200Response instantiates a new ApiDevicePowerPoeDaisychainGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDevicePowerPoeDaisychainGet200Response() *ApiDevicePowerPoeDaisychainGet200Response {
	this := ApiDevicePowerPoeDaisychainGet200Response{}
	return &this
}

// NewApiDevicePowerPoeDaisychainGet200ResponseWithDefaults instantiates a new ApiDevicePowerPoeDaisychainGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDevicePowerPoeDaisychainGet200ResponseWithDefaults() *ApiDevicePowerPoeDaisychainGet200Response {
	this := ApiDevicePowerPoeDaisychainGet200Response{}
	return &this
}

// GetSufficientPower returns the SufficientPower field value if set, zero value otherwise.
func (o *ApiDevicePowerPoeDaisychainGet200Response) GetSufficientPower() bool {
	if o == nil || IsNil(o.SufficientPower) {
		var ret bool
		return ret
	}
	return *o.SufficientPower
}

// GetSufficientPowerOk returns a tuple with the SufficientPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDevicePowerPoeDaisychainGet200Response) GetSufficientPowerOk() (*bool, bool) {
	if o == nil || IsNil(o.SufficientPower) {
		return nil, false
	}
	return o.SufficientPower, true
}

// HasSufficientPower returns a boolean if a field has been set.
func (o *ApiDevicePowerPoeDaisychainGet200Response) HasSufficientPower() bool {
	if o != nil && !IsNil(o.SufficientPower) {
		return true
	}

	return false
}

// SetSufficientPower gets a reference to the given bool and assigns it to the SufficientPower field.
func (o *ApiDevicePowerPoeDaisychainGet200Response) SetSufficientPower(v bool) {
	o.SufficientPower = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *ApiDevicePowerPoeDaisychainGet200Response) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDevicePowerPoeDaisychainGet200Response) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *ApiDevicePowerPoeDaisychainGet200Response) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *ApiDevicePowerPoeDaisychainGet200Response) SetInUse(v bool) {
	o.InUse = &v
}

func (o ApiDevicePowerPoeDaisychainGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDevicePowerPoeDaisychainGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SufficientPower) {
		toSerialize["sufficientPower"] = o.SufficientPower
	}
	if !IsNil(o.InUse) {
		toSerialize["inUse"] = o.InUse
	}
	return toSerialize, nil
}

type NullableApiDevicePowerPoeDaisychainGet200Response struct {
	value *ApiDevicePowerPoeDaisychainGet200Response
	isSet bool
}

func (v NullableApiDevicePowerPoeDaisychainGet200Response) Get() *ApiDevicePowerPoeDaisychainGet200Response {
	return v.value
}

func (v *NullableApiDevicePowerPoeDaisychainGet200Response) Set(val *ApiDevicePowerPoeDaisychainGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDevicePowerPoeDaisychainGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDevicePowerPoeDaisychainGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDevicePowerPoeDaisychainGet200Response(val *ApiDevicePowerPoeDaisychainGet200Response) *NullableApiDevicePowerPoeDaisychainGet200Response {
	return &NullableApiDevicePowerPoeDaisychainGet200Response{value: val, isSet: true}
}

func (v NullableApiDevicePowerPoeDaisychainGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDevicePowerPoeDaisychainGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


